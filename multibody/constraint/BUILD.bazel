# -*- python -*-

load(
<<<<<<< HEAD
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_binary",
    "drake_cc_googletest",
    "drake_cc_library",
    "drake_cc_package_library",
=======
    "//tools:drake.bzl",
    "drake_cc_googletest",
    "drake_cc_library",
    "drake_cc_binary",
>>>>>>> intial
)
load("//tools/lint:lint.bzl", "add_lint_tests")

package(default_visibility = ["//visibility:public"])

<<<<<<< HEAD
drake_cc_package_library(
    name = "constraint",
    deps = [
        ":constraint_problem_data",
        ":constraint_solver",
    ],
)

drake_cc_library(
    name = "constraint_problem_data",
=======
drake_cc_library(
    name = "constraint",
>>>>>>> intial
    hdrs = [
        "constraint_problem_data.h",
    ],
    deps = [
        "//common:essential",
    ],
)

drake_cc_library(
    name = "constraint_solver",
    srcs = ["constraint_solver.cc"],
    hdrs = [
        "constraint_solver.h",
    ],
    deps = [
<<<<<<< HEAD
        ":constraint_problem_data",
        "//solvers:moby_lcp_solver",
=======
        ":constraint",
        "//solvers:mathematical_program",
>>>>>>> intial
    ],
)

# === test/ ===

drake_cc_googletest(
    name = "constraint_solver_test",
<<<<<<< HEAD
    deps = [
        ":constraint_solver",
        "//examples/rod2d",
        "//solvers:moby_lcp_solver",
        "//solvers:unrevised_lemke_solver",
=======
    # Test size increased to not timeout when run with Valgrind.
    size = "medium",
    deps = [
        ":constraint_solver",
        "//examples/rod2d",
>>>>>>> intial
    ],
)

add_lint_tests()
